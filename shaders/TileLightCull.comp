#version 450
#extension GL_ARB_separate_shader_objects : enable 

const int TILE_SIZE = 16;

struct PointLight
{
	vec3 pos;
	float radius;
	vec3 intensity;
};

#define MAX_POINT_LIGHT_PER_TILE 1023

struct LightVisible
{
	uint count;
	uint light_indices[MAX_POINT_LIGHT_PER_TILE];
};


layout(push_constant) uniform PushConstantObject
{
	mat4 projMatrix;
	mat4 viewMatrix;
	ivec2 tileNum;
	ivec2 viewPortSize;
	float zFar;
	float zNear;
} push_constants;

layout(std430 , set = 0 , binding = 0 ) buffer writeonly TileLightVisible
{
	LightVisible lightVisibles[];
};

layout(std140 , set = 0 , binding = 1 ) uniform LightsUBO
{
	uint lightCount;
	PointLight pointLights[1000];
};

layout(set = 0 , binding = 2) uniform sampler2D depthSampler;

layout(local_size_x = 32) in;

struct ViewFrustum
{
	vec4 planes[6];
};

shared ViewFrustum frustum;
shared uint tile_light_count;
shared float min_depth;
shared float max_depth;

float viewZ(float depth)
{
	float zFar = push_constants.zFar;
	float zNear = push_constants.zNear;
	return zNear * zFar / ( zFar - depth * ( zFar - zNear)  ); 
}

bool LightFrustumIntersection(PointLight light , ViewFrustum frustum)
{
	bool res = true;
	vec4 viewPos = push_constants.viewMatrix * vec4( light.pos , 1.0f ) ;

	for( int i = 0 ; i < 6 ; i ++ ) 
	{
		if( ( dot( viewPos.xyz , frustum.planes[i].xyz) + frustum.planes[i].w )  < -light.radius ) 
		{
			res = false;
			break;
		}
	}
		
	return res;
}

void main()
{
	ivec2 tile_id = ivec2(gl_WorkGroupID.xy);
	uint tile_index = tile_id.y * push_constants.tileNum.x + tile_id.x;
	
	vec4 col1 = vec4( push_constants.projMatrix[0][0] , push_constants.projMatrix[1][0] , push_constants.projMatrix[2][0] , push_constants.projMatrix[3][0] );
	vec4 col2 = vec4( push_constants.projMatrix[0][1] , push_constants.projMatrix[1][1] , push_constants.projMatrix[2][1] , push_constants.projMatrix[3][1] );
	vec4 col4 = vec4( push_constants.projMatrix[0][3] , push_constants.projMatrix[1][3] , push_constants.projMatrix[2][3] , push_constants.projMatrix[3][3] );
	
	
	if( gl_LocalInvocationIndex == 0 )
	{
		min_depth = 1.0;
		max_depth = 0.0;
		tile_light_count = 0;
		
		for( int y = 0 ; y < TILE_SIZE ; y ++ )
		{
			for( int x = 0 ; x < TILE_SIZE ; x ++ )
			{
				vec2 sampleLoc = ( vec2(TILE_SIZE , TILE_SIZE) * tile_id + vec2(x , y ) ) / push_constants.viewPortSize;
				float depth = texture(depthSampler , sampleLoc).x;
				min_depth = min(min_depth , depth);
				if(depth != 1.0f) max_depth = max(max_depth , depth);
			}
		}
		
		if( min_depth >= max_depth)
		{
			min_depth = max_depth;
		}
		
		vec2 tileRightBound = 2 * ( tile_id + ivec2( 1 , 1 ) ) - push_constants.tileNum;
		vec2 tileLeftBound = 2 * tile_id - push_constants.tileNum;
		vec2 tileNums = push_constants.tileNum;
		tile_light_count = 0;
		
		frustum.planes[0] = tileRightBound.x * col4 - tileNums.x * col1;
		frustum.planes[1] = tileNums.x * col1 - tileLeftBound.x * col4;
		frustum.planes[2] = tileRightBound.y * col4 - tileNums.y * col2;
		frustum.planes[3] = tileNums.y * col2 - tileLeftBound.y * col4;
		frustum.planes[4] = vec4( 0 , 0 , 1.0f , -viewZ(min_depth));
		frustum.planes[5] = vec4( 0 , 0 , -1.0f , viewZ(max_depth));
		
		for( int i = 0 ; i < 4 ; i ++ )
		{
			float invLength = 1.0f / length(frustum.planes[i].xyz);
			frustum.planes[i] = frustum.planes[i] * invLength;
		}
	}
	
	barrier();
	
	for( uint i = gl_LocalInvocationIndex ; i < lightCount && tile_light_count < MAX_POINT_LIGHT_PER_TILE ; i += gl_WorkGroupSize.x ) 
	{
		if( LightFrustumIntersection( pointLights[i] , frustum ) )
		{
			uint slot = atomicAdd( tile_light_count , 1 );
			if ( slot >= MAX_POINT_LIGHT_PER_TILE ) { break ; } 
			lightVisibles[tile_index].light_indices[slot] = i;
		}
	}
		
	barrier();
	
	if( gl_LocalInvocationIndex == 0 )
	{
		lightVisibles[tile_index].count = tile_light_count;
	}
	
}